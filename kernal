  -在 "計算機科學中" 是一個用來 "管理" 軟體發出的 "資料I/O（輸入與輸出）要求" 的電腦程式，將這些要求 "轉譯為" 資料處理的 "指令" 並 "交由中央處理器（CPU）及電腦中其他電子元件進行處理"。
  -它是為眾多應用程式提供對電腦硬體的安全存取的一部分軟體，這種存取是 "有限" 的，並由核心決定一個程式在什麼時候對某部分硬體操作多長時間。
  -直接對硬體操作是非常複雜的。所以核心提供一種硬體抽象的方法，來完成操作。例如，通過行程間通訊機制及系統呼叫，應用行程可間接控制所需的硬體資源（特別是處理器及IO裝置）。
 #單核心
  -單核心結構在硬體之上，定義了一個高階的抽象介面，應用一組原語(或稱系統呼叫（System call））來實現作業系統的功能，
 #微核心
  -由一個硬體抽象層和一組比較關鍵的原語或系統呼叫組成；這些原語包括了建立一個系統必需的幾個部分；如"執行緒管理"，"位址空間"和"行程間通訊"等。
  -微核的目標是將系統服務的"實現"與系統的"基本操作規則"分開。
  -微核心結構必然是多執行緒的。
 #混合核心
  -設計理念來自微核心
 #外核心
  -外核心系統，也被稱為縱向結構作業系統，是一種比較極端的設計方法。
  -設計理念是讓使用者程式的設計者來決定硬體介面的設計。
  -通常只負責系統保護和系統資源復用相關的服務。
  -傳統的核心設計（包括單核和微核）都對硬體作了抽象，把硬體資源或裝置驅動程式都隱藏在硬體抽象層下。
  -外核的目標就是讓應用程式直接請求一塊特定的物理空間，一塊特定的磁碟塊等等。
  -只提供了比較低階的硬體操作，沒有像其他系統一樣提供進階的硬體抽象，需要增加額外的執行庫支援。
  -
  -
  -
  -
